[{"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\index.js":"1","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\App.js":"2","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Calendar.js":"3","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Map.js":"4","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Icicle.js":"5","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\RadioButtons.js":"6","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Aggregation.js":"7","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Plot.js":"8","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Alignment.js":"9","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\ClientSelection.js":"10","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\EpsilonSlider.js":"11","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\ClusterFunction.js":"12","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\TagifyInput.js":"13","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\PlotOption.js":"14","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Legend.js":"15","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\PCP.js":"16","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\NewScatter.js":"17"},{"size":218,"mtime":1611160376426,"results":"18","hashOfConfig":"19"},{"size":20320,"mtime":1638451964569,"results":"20","hashOfConfig":"19"},{"size":19393,"mtime":1638451386559,"results":"21","hashOfConfig":"19"},{"size":9461,"mtime":1638451261023,"results":"22","hashOfConfig":"19"},{"size":14827,"mtime":1638451530765,"results":"23","hashOfConfig":"19"},{"size":4370,"mtime":1638451216035,"results":"24","hashOfConfig":"19"},{"size":15653,"mtime":1638451646190,"results":"25","hashOfConfig":"19"},{"size":3513,"mtime":1629560023478,"results":"26","hashOfConfig":"19"},{"size":3016,"mtime":1631722764438,"results":"27","hashOfConfig":"19"},{"size":4458,"mtime":1638450923097,"results":"28","hashOfConfig":"19"},{"size":2432,"mtime":1638451422204,"results":"29","hashOfConfig":"19"},{"size":7237,"mtime":1638450738158,"results":"30","hashOfConfig":"19"},{"size":2091,"mtime":1638451121100,"results":"31","hashOfConfig":"19"},{"size":5086,"mtime":1638450980299,"results":"32","hashOfConfig":"19"},{"size":874,"mtime":1628595533544,"results":"33","hashOfConfig":"19"},{"size":12831,"mtime":1632164953307,"results":"34","hashOfConfig":"19"},{"size":13482,"mtime":1632164932060,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"bhgdpb",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\index.js",[],["73","74"],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\App.js",["75"],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Calendar.js",["76","77","78","79"],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Map.js",["80","81","82"],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Icicle.js",["83"],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\RadioButtons.js",[],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Aggregation.js",["84","85","86"],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Plot.js",[],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Alignment.js",[],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\ClientSelection.js",[],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\EpsilonSlider.js",["87"],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\ClusterFunction.js",[],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\TagifyInput.js",["88","89","90"],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\PlotOption.js",[],"C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\Legend.js",["91"],"import React, { useEffect } from 'react'\r\nimport L from \"leaflet\";\r\nimport \"../Legend.css\";\r\n\r\nexport default function Legend(props) {\r\n  const map = props.map;\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      const legend = L.control({position: 'topright'})\r\n\r\n      legend.onAdd = () => {\r\n        const div = L.DomUtil.create('div', 'legendContainer' )\r\n\r\n        div.innerHTML = `\r\n          <div>\r\n            Higher\r\n          </div>\r\n          <div \r\n            style='\r\n              background-image: linear-gradient(#005a32, #ffffcc); \r\n              width: 16px; \r\n              height: 100px;\r\n              margin:auto;\r\n              z-index: 1000;\r\n            '\r\n          ></div>\r\n          <div id='lower'>\r\n            Lower\r\n          </div>\r\n        `\r\n        return div;\r\n      };\r\n\r\n      legend.addTo(map);\r\n\r\n    }\r\n  }, [map])\r\n\r\n  return null;\r\n}\r\n","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\PCP.js",["92"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { axisLeft, select } from 'd3';\r\n\r\nconst padding = 0;\r\nconst margins = Object.freeze({\r\n    top: 20, \r\n    right: 20, \r\n    bottom: 50, \r\n    left: 20\r\n}); \r\n\r\nconst PCP = React.memo( (props) => {\r\n    const data = props.data;\r\n    const copy = props.copy;\r\n    const width = props.width;\r\n    const height = props.height;\r\n    const keys = props.keys;\r\n    const epsilon = props.epsilon;\r\n    const groupLevel = props.groupLevel;\r\n    const filterMasks = props.filterMasks;\r\n    const setFilterMasks = props.setFilterMasks;\r\n    const individualData = props.individualData;\r\n    const clusterData = props.clusterData;\r\n    const hovered = props.hovered;\r\n    const onHovered = props.onHovered;\r\n    const whiteList = props.whiteList;\r\n\r\n    const svgPcp = useRef(); \r\n\r\n    const [selections, setSelections] = useState(new Map());\r\n    const [brushSelection, setBrushSelection] = useState([]); \r\n    const [clientSelection, setClientSelection] = useState([]);\r\n    const [clusterSelection, setClusterSelection] = useState([]);\r\n\r\n    // Function to create the filter mask returned by the PCP\r\n    const calculatePCPMask = (data, selected) => {\r\n        return data.map(d => {\r\n            return {\r\n                id: d.id,\r\n                value: selected.includes(d)\r\n            }\r\n        }) \r\n    };\r\n\r\n    const brushHeight = 30;\r\n    const innerHeight = height - margins.top - margins.bottom;\r\n    const innerWidth = width - padding - margins.left - margins.right;\r\n\r\n    // Color scale\r\n    const color = d3.scaleOrdinal(d3.schemeCategory10)\r\n\r\n    useEffect(() => {\r\n        const svg = select(svgPcp.current);\r\n        const content = svg.select('.content').attr('transform', `translate(${margins.left}, ${margins.top})`);\r\n\r\n        if (data.length > 0) {\r\n            // console.log(keysoriginal)\r\n            // let keys;\r\n            // if (keysoriginal.length === 1) {\r\n            //     keys = keysoriginal.concat([keysoriginal[0]])\r\n            // } else {\r\n            //     keys = keysoriginal\r\n            // }\r\n\r\n            // console.log(keys)\r\n\r\n            // Create x axis\r\n            const x = d3.scalePoint()\r\n                    .domain(keys)\r\n                    .range([margins.left, innerWidth])\r\n\r\n            // Create y axes\r\n            let y = {}\r\n            let i;\r\n            for (i in keys) {\r\n                let name = keys[i]\r\n                \r\n                y[name] = (name === 'lights_off_clus' || name === 'lights_on_clus')\r\n                ? d3.scaleTime()\r\n                    .domain(d3.extent(copy, d => d[name]))\r\n                    .range([innerHeight, 0])\r\n                    .nice()\r\n                : d3.scaleLinear()\r\n                    .domain(d3.extent(copy, d => d[name]))\r\n                    .range([innerHeight, 0])\r\n                    .nice()\r\n            };\r\n\r\n            // Function to create paths\r\n            const line = (d) => {\r\n                return d3.line()\r\n                    (keys.map(p => {\r\n                        return [x(p), y[p](d[p])]\r\n                    }))\r\n            };\r\n\r\n            // Function to handle the brush\r\n            const brushed = ({selection}, key) => {\r\n                let selected = [];        // array containing the nights that fall between the interval [min, max]\r\n                const selectedClient_id = [];\r\n                const selectedCluster = [];\r\n\r\n                if (selection === null) {\r\n                    selections.delete(key)\r\n                } else {\r\n                    setSelections(new Map(selections.set(key, selection.map(y[key].invert))));\r\n                };\r\n\r\n                path.each(function(d) {\r\n                    const active = Array.from(selections).every(([key, [max, min]]) => d[key] >= min && d[key] <= max);\r\n                    // console.log(active)\r\n                    // Push all active paths to selected\r\n                    if (active) {\r\n                        if (groupLevel === 'individual') {\r\n                            selectedClient_id.push(d.client_id)\r\n                        } else if (groupLevel === 'cluster') {\r\n                            selectedCluster.push(d.cluster)\r\n                        } else {\r\n                            selected.push(d)\r\n                        }\r\n                        d3.select(this).raise()\r\n                    };\r\n                });\r\n\r\n                if (groupLevel === 'individual') {\r\n                    if (selectedClient_id.length === 0) {\r\n                        selections.delete(key)\r\n\r\n                        path.each(function(d) {\r\n                            const active = Array.from(selections).every(([key, [max, min]]) => d[key] >= min && d[key] <= max);\r\n    \r\n                            // Push all active paths to selected\r\n                            if (active) {\r\n                                selectedClient_id.push(d.client_id)\r\n                                d3.select(this).raise()\r\n                            };\r\n                        }); \r\n                    }\r\n                    // Pass all nights of the client_ids that are selected to the other components via selected\r\n                    selected = data.filter(d => selectedClient_id.includes(d.client_id))\r\n                    // Push the selected client_id such to be able to color the selected lines\r\n                    setClientSelection(selectedClient_id)\r\n                }  else if (groupLevel === 'cluster') {\r\n                    if (selectedCluster.length === 0) {\r\n                        selections.delete(key)\r\n\r\n                        path.each(function(d) {\r\n                            const active = Array.from(selections).every(([key, [max, min]]) => d[key] >= min && d[key] <= max);\r\n        \r\n                            // Push all active paths to selected\r\n                            if (active) {\r\n                                selectedCluster.push(d.cluster)\r\n                                d3.select(this).raise()\r\n                            };\r\n                        }); \r\n                    }\r\n                    // Pass all nights of the client_ids that are selected to the other components via selected\r\n                    selected = data.filter(d => selectedCluster.includes(d.cluster))\r\n                    // Push the selected client_id such to be able to color the selected lines\r\n                    setClusterSelection(selectedCluster)\r\n                } else {\r\n                    if (selected.length === 0) {\r\n                        selections.delete(key)\r\n\r\n                        path.each(function(d) {\r\n                            const active = Array.from(selections).every(([key, [max, min]]) => d[key] >= min && d[key] <= max);\r\n        \r\n                            // Push all active paths to selected\r\n                            if (active) {\r\n                                selected.push(d)\r\n                                d3.select(this).raise()\r\n                            };\r\n                        }); \r\n                    }\r\n                    // Set the selected nights to brushSelection to color the selected lines\r\n                    setBrushSelection(selected)\r\n                };\r\n\r\n                // Set the selected nights to true in the filter masks\r\n                setFilterMasks({...filterMasks, 'pcp': calculatePCPMask(copy, selected)})\r\n            };       \r\n\r\n            // Brush\r\n            const brush = d3.brushY()\r\n                .extent([\r\n                    [-(brushHeight/2), 0],\r\n                    [brushHeight/2, innerHeight]\r\n                ])\r\n                .on('end', brushed)\r\n\r\n            let path;\r\n            if (groupLevel === 'individual') {\r\n                // Add path\r\n                path = content\r\n                    .selectAll('path')\r\n                    .data(individualData.filter(d => d.cluster !== undefined))\r\n                    .join('path')\r\n                        .attr('stroke', 0.2)\r\n                        .attr('opacity', 0.8)\r\n                        .attr('fill', 'black')\r\n                        .attr('d', line)\r\n                        .style(\"fill\", \"none\")\r\n                        .style('stroke', d => clientSelection.includes(d.client_id) ? color(d['cluster']) : 'grey')\r\n                        .style('stroke-width', d => clientSelection.includes(d.client_id) ? 0.8 : 0.6)\r\n                        .style('opacity', d => clientSelection.includes(d.client_id) ? 0.8 : 0.6)\r\n            } else if (groupLevel === 'cluster') {\r\n                // Add path\r\n                path = content\r\n                    .selectAll('path')\r\n                    .data(clusterData.filter(d => d.cluster !== undefined))\r\n                    .join('path')\r\n                        .attr('stroke', 0.2)\r\n                        .attr('opacity', 0.8)\r\n                        .attr('fill', 'black')\r\n                        .attr('d', line)\r\n                        .style(\"fill\", \"none\")\r\n                        .style('stroke', d => clusterSelection.includes(d.cluster) ? color(d['cluster']) : 'grey')\r\n                        .style('stroke-width', d => clusterSelection.includes(d.cluster) ? 0.8 : 0.6)\r\n                        .style('opacity', d => clusterSelection.includes(d.cluster) ? 0.8 : 0.6)\r\n            } else {\r\n                // Add path\r\n                path = content\r\n                    .selectAll('path')\r\n                    .data(data.filter(d => d.cluster !== undefined))\r\n                    .join('path')\r\n                        .attr('stroke', 0.2)\r\n                        .attr('opacity', 0.8)\r\n                        .attr('fill', 'black')\r\n                        .attr('d', line)\r\n                        .style(\"fill\", \"none\")\r\n                        .style('stroke', d => brushSelection.includes(d) ? (hovered === d.id ? 'red' : color(d['cluster'])) : (hovered === d.id ? 'red' : 'grey'))\r\n                        .style('stroke-width', d => brushSelection.includes(d) ? 0.8 : (hovered === d.id ? 3 : 0.1))\r\n                        .style('opacity', d => brushSelection.includes(d) ? 0.8 : (hovered === d.id ? 0.8 : 0.6))\r\n                        .style('cursor', 'pointer')\r\n                        .on('click', (d,e) => onHovered(e.id === hovered ? 0 : e.id))\r\n            };\r\n\r\n            path.selectAll('.pathTitle')\r\n                .data(d => groupLevel === 'individual' ? [['Subject ID: ' + d.client_id]] : (groupLevel === 'cluster' ? [['Cluster: ' + d.cluster]] :[['Subject ID: ' + d.client_id + ', Date: ' + d.date]]))\r\n                .join('title')\r\n                .attr('class', 'pathTitle')\r\n                .text((d,e) => d)\r\n\r\n            // console.log(path.data())\r\n            // console.log(clientSelection)\r\n                 \r\n            // Add axes\r\n            const axes = svg\r\n                .selectAll('.axis')\r\n                .data(keys)\r\n                .join('g')\r\n                .attr('class', 'axis')\r\n                .attr('transform', d => `translate(${x(d) + margins.left}, ${margins.top})`)\r\n                .each(function(d) { \r\n                    d3.select(this).call((d === 'lights_off_clus' || d === 'lights_on_clus') ? axisLeft(y[d]).tickFormat(d3.timeFormat('%H:%M')) : axisLeft(y[d])); \r\n                })\r\n\r\n            axes.call(brush)\r\n            \r\n            // Add titles to the x axis\r\n            svg.selectAll('.xTitle')\r\n                .data(keys)\r\n                .join('text')\r\n                .attr('class', 'xTitle')\r\n                .style('text-anchor', (d,i) => {\r\n                    if (i === 0){\r\n                        return 'start'\r\n                    } else if (i === keys.length-1) {\r\n                        return 'end'\r\n                    } else {\r\n                        return 'middle'\r\n                    }\r\n                })\r\n                .attr('x', (d,i) => i === keys.length -1 ? x(d) + 20 : x(d))\r\n                .attr('y', innerHeight+ margins.bottom + 5)\r\n                .text(d => (whiteList.find(e => e.value === d)).name)\r\n                            \r\n        } else {\r\n            content.selectAll('path').remove()\r\n        }\r\n    }, [data, innerHeight, innerWidth, keys, epsilon, groupLevel, brushSelection, clientSelection, copy, filterMasks, individualData, setFilterMasks, selections, clusterData, hovered, onHovered, whiteList])\r\n\r\n    return (\r\n        <svg className='pcp' width={width} height={height} ref={svgPcp}>\r\n            <defs>\r\n                <clipPath id='pcp'>\r\n                    <rect x={0} y={0} width={innerWidth} height={innerHeight} />\r\n                </clipPath>\r\n            </defs>\r\n            <g className='content' clipPath='url(#pcp)' />\r\n        </svg>\r\n    )\r\n});\r\n\r\nexport default PCP;","C:\\Users\\smets\\Documents\\Eindhoven\\Master\\Graduation project\\React sleep vis\\my-app\\src\\Components\\NewScatter.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":268,"column":6,"nodeType":"99","endLine":268,"endColumn":26,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":102,"column":20,"nodeType":"103","messageId":"104","endLine":102,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":109,"column":32,"nodeType":"103","messageId":"107","endLine":109,"endColumn":67},{"ruleId":"101","severity":1,"message":"102","line":126,"column":20,"nodeType":"103","messageId":"104","endLine":126,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":133,"column":32,"nodeType":"103","messageId":"107","endLine":133,"endColumn":67},{"ruleId":"97","severity":1,"message":"108","line":131,"column":8,"nodeType":"99","endLine":131,"endColumn":17,"suggestions":"109"},{"ruleId":"97","severity":1,"message":"110","line":179,"column":12,"nodeType":"99","endLine":179,"endColumn":14,"suggestions":"111"},{"ruleId":"97","severity":1,"message":"110","line":212,"column":12,"nodeType":"99","endLine":212,"endColumn":14,"suggestions":"112"},{"ruleId":"97","severity":1,"message":"113","line":100,"column":24,"nodeType":"114","endLine":100,"endColumn":59},{"ruleId":"115","severity":1,"message":"116","line":48,"column":30,"nodeType":"117","messageId":"118","endLine":48,"endColumn":49},{"ruleId":"97","severity":1,"message":"113","line":90,"column":24,"nodeType":"114","endLine":90,"endColumn":59},{"ruleId":"115","severity":1,"message":"119","line":258,"column":19,"nodeType":"117","messageId":"118","endLine":258,"endColumn":29},{"ruleId":"115","severity":1,"message":"120","line":23,"column":11,"nodeType":"117","messageId":"118","endLine":23,"endColumn":16},{"ruleId":"115","severity":1,"message":"121","line":1,"column":34,"nodeType":"117","messageId":"118","endLine":1,"endColumn":43},{"ruleId":"115","severity":1,"message":"122","line":1,"column":45,"nodeType":"117","messageId":"118","endLine":1,"endColumn":53},{"ruleId":"97","severity":1,"message":"123","line":41,"column":8,"nodeType":"99","endLine":41,"endColumn":27,"suggestions":"124"},{"ruleId":"115","severity":1,"message":"125","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":13},{"ruleId":"97","severity":1,"message":"126","line":282,"column":8,"nodeType":"99","endLine":282,"endColumn":206,"suggestions":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterMasks'. Either include it or remove the dependency array. You can also do a functional update 'setFilterMasks(f => ...)' if you only need 'filterMasks' in the 'setFilterMasks' call.","ArrayExpression",["130"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'newDate'.","unsafeRefs","React Hook useEffect has missing dependencies: 'areaBounds._northEast.lat', 'areaBounds._northEast.lng', 'areaBounds._southWest.lat', 'areaBounds._southWest.lng', 'clusterData', 'copy', 'data', 'filterMasks', 'groupLevel', 'individualData', and 'setFilterMasks'. Either include them or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'mymap'. Either include it or remove the dependency array.",["132"],["133"],"Assignments to the 'data' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-unused-vars","'setCurrentZoomState' is assigned a value but never used.","Identifier","unusedVar","'clientRect' is assigned a value but never used.","'marks' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'tagifyRef.current'. Either exclude it or remove the dependency array. Mutable values like 'tagifyRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["134"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'clusterSelection' and 'color'. Either include them or remove the dependency array.",["135"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"140","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [year, data, client, filterMasks]",{"range":"147","text":"148"},"Update the dependencies array to be: [areaBounds._northEast.lat, areaBounds._northEast.lng, areaBounds._southWest.lat, areaBounds._southWest.lng, clusterData, copy, data, filterMasks, groupLevel, individualData, opacity, setFilterMasks]",{"range":"149","text":"150"},"Update the dependencies array to be: [mymap]",{"range":"151","text":"152"},{"range":"153","text":"152"},"Update the dependencies array to be: []",{"range":"154","text":"155"},"Update the dependencies array to be: [data, innerHeight, innerWidth, keys, epsilon, groupLevel, brushSelection, clientSelection, copy, filterMasks, individualData, setFilterMasks, selections, clusterData, hovered, onHovered, whiteList, color, clusterSelection]",{"range":"156","text":"157"},[12395,12415],"[year, data, client, filterMasks]",[5337,5346],"[areaBounds._northEast.lat, areaBounds._northEast.lng, areaBounds._southWest.lat, areaBounds._southWest.lng, clusterData, copy, data, filterMasks, groupLevel, individualData, opacity, setFilterMasks]",[7685,7687],"[mymap]",[8607,8609],[1338,1357],"[]",[12242,12440],"[data, innerHeight, innerWidth, keys, epsilon, groupLevel, brushSelection, clientSelection, copy, filterMasks, individualData, setFilterMasks, selections, clusterData, hovered, onHovered, whiteList, color, clusterSelection]"]